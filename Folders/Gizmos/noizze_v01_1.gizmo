NoOp {
 name noizze
 tile_color 0x1ce4ffff
 help "noizze v1.1 2013/02/17 Fabian Fischer\nnoizze is a waveform generator. Use it to control other knobs in your scripts or to add customizable noise on any curve.\n\nIf the curve editor doesn't show your newly added generator\n collapse the properties panel of the nozze node and reopen it again in order to update the DAG.\nUsage:\nadd a generator or noise and link the output to a knob. You can combine the output of several generators with the 'operation' drop-down in each generator section.\ne.g. add a sine and subtract the output of a noise-generator to get a slightly distorted sine-signal..."
 selected true
 xpos -14
 ypos -262
 hide_input true
 addUserKnob {20 noizze}
 addUserKnob {3 g_count l INVISIBLE +INVISIBLE}
 addUserKnob {1 gList l INVISIBLE +INVISIBLE}
 gList "\[]"
 addUserKnob {7 combo_out l "combined output" R -500 500}
 addUserKnob {22 update l "  update combined  " t "This button updates the expression for the combined ouput. Push it every time you add a generator or when you've changed the operation for one or more generators." T "n=nuke.thisNode()\n_=n\['gList'].value()\ngl = eval(_)\nex='0'\nfor i in gl:\n o = 'out'+i\n op = n\['op'+i].value()\n if op == 'add':\n  ex=ex+'+'+o\n elif op == 'subtract':\n  ex=ex+'-'+o\n elif op == 'multiply':\n  ex=ex+'*'+o\nn\['combo_out'].setExpression(ex)\n" +STARTLINE}
 addUserKnob {22 gengen l "  add generator  " t "This adds a waveform generator." -STARTLINE T "n = nuke.thisNode()\ngc = n\['g_count'].value()\n_ = n\['gList'].value()\ngl = eval(_)\ngc += 1\nn\['g_count'].setValue(gc)\nsc = str(int(gc))\ngl.append(sc)\nn\['gList'].setValue(str(gl))\nKList = \"('divider','alg','per','amp','ph','off','out','op','remGen')\"\n\ndiv = nuke.Text_Knob(\"divider\"+sc,\"GENERATOR \"+sc)\nalg = nuke.Enumeration_Knob('alg'+sc, 'algorithm', \['sine', 'cosine', 'square', 'triangular', 'sawtooth', 'bounce'])\nper = nuke.Double_Knob('per'+sc, 'period')\nper.setRange(0,100)\namp = nuke.Double_Knob('amp'+sc, 'amplitude')\namp.setRange(0,100)\nph = nuke.Double_Knob('ph'+sc, 'phase')\nph.setRange(-180,180)\noff = nuke.Double_Knob('off'+sc, 'offset')\noff.setRange(-100,100)\nout = nuke.Double_Knob('out'+sc, 'generator '+sc+' output')\nout.setRange(-100,100)\nop = nuke.Enumeration_Knob('op'+sc, 'operation', \['add', 'subtract', 'multiply'])\nremGen = nuke.PyScript_Knob('remGen'+sc,'  remove Generator  ')\nremGen.setCommand(\"id=str(\"+sc+\")\\nklist=\"+KList+\"\\nn=nuke.thisNode()\\nfor i in klist:\\n n.removeKnob(n\[i+id])\\n_ = n\['gList'].value()\\ngl = eval(_)\\ngl.remove(id)\\nn\['gList'].setValue(str(gl))\")\n\nper.setValue(25)\namp.setValue(1)\n\nout.setExpression(\"\[python -execlocal import\\\\ math\\\\ \\\\nP=nuke.thisNode()\\\\\['per\"+sc+\"'\\\\].value()\\\\nA=nuke.thisNode()\\\\\['amp\"+sc+\"'\\\\].value()\\\\nalg=nuke.thisNode()\\\\\['alg\"+sc+\"'\\\\].value()\\\\nt=nuke.frame()\\\\ntp=t+nuke.thisNode()\\\\\['ph\"+sc+\"'\\\\].value()\\\\nof=nuke.thisNode()\\\\\['off\"+sc+\"'\\\\].value()\\\\n\\\\nif\\\\ P==0:\\\\n\\\\ ret=0\\\\nelif\\\\ alg=='sine':\\\\ \\\\n\\\\ B=2*math.pi/P\\\\n\\\\ ret=A*math.sin(B*tp)+of\\\\nelif\\\\ alg=='cosine':\\\\n\\\\ B=2*math.pi/P\\\\n\\\\ ret=A*math.cos(B*tp)+of\\\\nelif\\\\ alg=='square':\\\\ \\\\n\\\\ B=2*math.pi/P\\\\n\\\\ y=A*math.sin(B*tp)\\\\n\\\\ ret\\\\ =\\\\ (A+of)\\\\ if\\\\ y\\\\ >\\\\ 0\\\\ else\\\\ of\\\\nelif\\\\ alg=='triangular':\\\\ \\\\n\\\\ a=P/2\\\\n\\\\ y=2/a*(tp-a*math.floor(tp/a+1/2))*math.pow(-1,math.floor(tp/a+1/2))\\\\n\\\\ ret = y*A+of\\\\nelif\\\\ alg=='sawtooth':\\\\ \\\\n\\\\ y=2*(tp/P-math.floor(0.5+tp/P))\\\\n\\\\ ret = y*A+of\\\\nelif\\\\ alg=='bounce':\\\\n\\\\ B=2*math.pi/(2*P)\\\\n\\\\ ret=abs(A*math.sin(B*tp))+of]\")\n\n\nn.addKnob(div)\nn.addKnob(alg)\nn.addKnob(per)\nn.addKnob(amp)\nn.addKnob(ph)\nn.addKnob(off)\nn.addKnob(out)\nn.addKnob(op)\nn.addKnob(remGen)"}
 addUserKnob {22 gennoise l "  add noise  " t "This adds a noise generator" -STARTLINE T "n = nuke.thisNode()\ngc = n\['g_count'].value()\n_ = n\['gList'].value()\ngl = eval(_)\ngc += 1\nn\['g_count'].setValue(gc)\nsc = str(int(gc))\ngl.append(sc)\nn\['gList'].setValue(str(gl))\nKList = \"('divider','val','mult','off','out','op','remGen')\"\n\ndiv = nuke.Text_Knob(\"divider\"+sc,\"NOISE \"+sc)\n\nval = nuke.Double_Knob('val'+sc, 'value')\nmult = nuke.Double_Knob('mult'+sc, 'multiply')\nmult.setRange(0,100)\noff = nuke.Double_Knob('off'+sc, 'offset')\noff.setRange(-100,100)\nout = nuke.Double_Knob('out'+sc, 'generator '+sc+' output')\nout.setRange(-100,100)\nop = nuke.Enumeration_Knob('op'+sc, 'operation', \['add', 'subtract', 'multiply'])\nremGen = nuke.PyScript_Knob('remGen'+sc,'  remove Generator  ')\nremGen.setCommand(\"id=str(\"+sc+\")\\nklist=\"+KList+\"\\nn=nuke.thisNode()\\nfor i in klist:\\n n.removeKnob(n\[i+id])\\n_ = n\['gList'].value()\\ngl = eval(_)\\ngl.remove(id)\\nn\['gList'].setValue(str(gl))\")\n\nval.setVisible(True)\nval.setExpression(\"\[python -execlocal import\\\\ random\\\\nret=random.random()]\")\nmult.setValue(1)\n\nout.setExpression(\"off\"+sc+\"+(val\"+sc+\"*mult\"+sc+\")\")\n\n\nn.addKnob(div)\nn.addKnob(val)\nn.addKnob(mult)\nn.addKnob(off)\nn.addKnob(out)\nn.addKnob(op)\nn.addKnob(remGen)"}
}
