#! /mnt/repository/software/install/nuke/11.3v1/centos-6_x86-64/libnuke-11.3.1.so -nx
version 11.3 v1
Group {
 name Filler
 inputs 3
 help "Gaussian in-fill. Useful to remove markers and create clean plates."
 knobChanged "m = nuke.thisNode()\nkc = nuke.thisKnob()\n\nif kc.name() in \[\"iterations\"]:\n    i = nuke.toNode('Merge1')\n    i2 = nuke.toNode('Invert1')\n    o = nuke.toNode('Transform3')\n    \n    for n in nuke.allNodes():\n      if \"static\" not in n\['label'].getValue():\n          ###print \"i would delete\" + n\['name'].value()\n          nuke.delete(n)\n    \n    \n    slices = int(m\['iterations'].value())\n    step = int(1)\n    for x in range(1,slices+step,step):\n\n      b1 = nuke.nodes.Blur()\n      b1.setInput(0, i)\n      b1\['size'].setSingleValue(False)\n      b1\['size'].setExpression(\"parent.size.w\", 0)\n      b1\['size'].setExpression(\"parent.size.h\", 1)\n\n      b2 = nuke.nodes.Blur()\n      b2.setInput(0, i2)\n      b2\['size'].setSingleValue(False)\n      b2\['size'].setExpression(\"parent.size.w\", 0)\n      b2\['size'].setExpression(\"parent.size.h\", 1)\n\n      g1 = nuke.nodes.Grade()\n      g1.setInput(0, b2)\n      g1\['channels'].setValue('rgba')\n      g1\['blackpoint'].setValue(-0.0001)\n      g1\['disable'].setExpression(\"parent.softEdges ? 0 : 1\")\n\n      m1 = nuke.nodes.Merge()\n      m1.setInput(1, b1)\n      m1.setInput(0, g1)\n      m1\['operation'].setValue(\"divide\")\n      \n      if x < slices:\n         m2 = nuke.nodes.Merge()\n         m2.setInput(1, b2)\n         m2.setInput(0, g1)\n         m2\['operation'].setValue(\"divide\")\n    \n      i = m1\n      i2 = m2\n    \n    o.setInput(0, i)\n\n"
 tile_color 0x733520ff
 addUserKnob {20 User}
 addUserKnob {14 size t "Amount of 'in-fill' for one iteration. " R 0 100}
 size {10 10}
 addUserKnob {3 iterations t "How many times the blur/divide operation is repeated."}
 iterations 5
 addUserKnob {6 softEdges t "Smoother transition between iterations." -STARTLINE}
 softEdges true
 addUserKnob {7 angle t "Adjust the direction of the 'in-fill'. (Has no effect if size.w and size.h are the same value)." R -180 180}
 addUserKnob {41 slices l "clean edge" T VExtendEdge.slices}
 addUserKnob {6 blackOutside t "Clamp to format before the 'in-fill'." +STARTLINE}
 addUserKnob {4 maskChannel t "Which channel from the 'hole_mask' input is used to define the area to be 'in-filled'." M {Red Green Blue Alpha "" ""}}
 maskChannel Alpha
 addUserKnob {6 ignoreAlpha l "Don't process Alpha" t "Only process RGB channels and do not 'in-fill' the alpha channel." -STARTLINE}
 addUserKnob {6 outputAlpha l "output alpha" -STARTLINE}
 outputAlpha true
 addUserKnob {6 replacealpha l "replace alpha" -STARTLINE}
 addUserKnob {7 mix t "Dissolve between the effect and the original image."}
 mix 1
 addUserKnob {26 ""}
 addUserKnob {26 t l "" -STARTLINE T "PxF_Filler 3.0.4 - (c) 2015 - Xavier Bourque - www.pixelfudger.com"}
}
 Input {
  inputs 0
  name hole_mask
  label static
  xpos 337
  ypos -851
  number 1
 }
set N15634b90 [stack 0]
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle4
  label static
  xpos 457
  ypos -762
 }
push $N15634b90
 Shuffle {
  red blue
  green blue
  alpha blue
  name Shuffle3
  label static
  xpos 373
  ypos -762
 }
push $N15634b90
 Shuffle {
  red green
  blue green
  alpha green
  name Shuffle2
  label static
  xpos 290
  ypos -762
 }
push $N15634b90
 Shuffle {
  green red
  blue red
  alpha red
  name Shuffle1
  label static
  xpos 207
  ypos -762
 }
 Switch {
  inputs 4
  which {{parent.maskChannel}}
  name Switch2
  label static
  xpos 259
  ypos -686
 }
set N2ef2d3e0 [stack 0]
push $N2ef2d3e0
 Input {
  inputs 0
  name mask
  label static
  xpos 340
  ypos 1993
  number 2
 }
 Input {
  inputs 0
  name img
  label static
  xpos -726
  ypos -722
  addUserKnob {20 User}
  addUserKnob {7 blur R 0 500}
  addUserKnob {3 iterations}
 }
set N2451e9a0 [stack 0]
push $N2451e9a0
push $N2ef2d3e0
push $N2ef2d3e0
 Transform {
  rotate {{parent.angle}}
  center {2048 1463}
  name Transform2
  label static
  xpos 338
  ypos -624
 }
set N2b8bf2f0 [stack 0]
push $N2b8bf2f0
push $N2451e9a0
 Transform {
  rotate {{parent.angle i}}
  center {2048 1463}
  black_outside {{parent.blackOutside i}}
  name Transform1
  label static
  xpos 71
  ypos -677
 }
 CopyBBox {
  inputs 2
  name CopyBBox1
  label static
  xpos 104
  ypos -606
 }
 Group {
  inputs 2
  name VExtendEdge
  help "Push rgb pixels outwards using vectors  generated perpedicular to a control matte edge."
  label static
  note_font_size 10
  xpos 104
  ypos -545
  addUserKnob {20 User}
  addUserKnob {4 premult l "input is" M {premultiplied unpremultiplied}}
  premult unpremultiplied
  addUserKnob {41 from0 l "control matte channel" T Copy4.from0}
  addUserKnob {41 size l "pre-erode control matte" T FilterErode1.size}
  addUserKnob {7 preblur l "pre-blur control matte" t "Blurring the control matte by a moderate amount will increase the width of the extended edge border and help with blending together the slices." R 0 10}
  preblur 2
  addUserKnob {26 ""}
  addUserKnob {3 slices l "vector blur slices" t "The number of iterations of the vector blur operation, up to 10."}
  addUserKnob {7 preblur_vector l "preblur vector" t "Blur the vector a bit before it's used to extend the rgb pixels.  Can help with blending and will also extend the edge further." R 0 10}
  preblur_vector 2
  addUserKnob {7 vector_length l "vector length" t "The length of the vector blur operation per slice. Best to avoid making this too high because it can slow things down when multiplied by the number of slices." R 1 10}
  vector_length {{slices}}
  addUserKnob {26 ""}
  addUserKnob {4 output t "The default output is the rgb.  The vector output options are just for checking what's going on under the hood.  The \"-1 to 1\" range is the \"native\" format while the \"0 to 1\" range compresses the vectors so that negative values can be visualised." M {"extended rgb" "vectors (-1 to 1 range)" "vectors (0 to 1 range)" ""}}
 }
  Input {
   inputs 0
   name mask
   xpos 1108
   ypos 2695
   number 2
  }
  Clamp {
   name Clamp1
   xpos 1108
   ypos 2721
  }
  Invert {
   name Invert1
   xpos 1108
   ypos 2759
  }
  Input {
   inputs 0
   name img
   xpos 840
   ypos 457
  }
  Dot {
   name Dot2
   xpos 874
   ypos 570
  }
set Nb349b40 [stack 0]
  Dot {
   name Dot22
   xpos 898
   ypos 2459
  }
set N2ef7b9f0 [stack 0]
  Input {
   inputs 0
   name ctrl_matte
   xpos 1122
   ypos 453
   number 1
  }
  FilterErode {
   channels all
   size 0
   name FilterErode1
   selected true
   xpos 1122
   ypos 477
  }
push $Nb349b40
  Unpremult {
   name Unpremult11
   xpos 965
   ypos 566
   disable {{parent.premult i}}
  }
  Copy {
   inputs 2
   from0 rgba.alpha
   to0 rgba.alpha
   name Copy4
   xpos 1122
   ypos 559
   disable {{"!\[exists parent.input1]" i}}
  }
  Blur {
   channels alpha
   size {{parent.preblur i}}
   name Blur12
   label "pre-blur alpha"
   xpos 1122
   ypos 648
  }
set N245db9b0 [stack 0]
push $N245db9b0
push $N245db9b0
push $N245db9b0
  Group {
   inputs 2
   name ExtendEdge
   help "Very useful as a super unpremultiplier.  The input matte is used as the source edge to extend the input colour channels beyond their existing alpha.  It can also be used to do dilate/erode operations on an alpha. The effect can be extended by using multiple copies.  The result should probably be re-comped with the original using an edge matte through a KeyMix so that only the desired areas are used.  "
   xpos 1325
   ypos 662
   addUserKnob {20 Controls}
   addUserKnob {7 preblurVector R 0 10}
   preblurVector {{parent.preblur_vector i}}
   addUserKnob {41 scale l "vector length" T VectorBlur2.scale}
  }
   Input {
    inputs 0
    name Input
    xpos 556
    ypos -426
   }
set N24510860 [stack 0]
   Dot {
    name Dot1
    xpos 707
    ypos -414
   }
   Dot {
    name Dot2
    xpos 707
    ypos -121
   }
   Input {
    inputs 0
    name matte
    xpos 440
    ypos -424
    number 1
   }
   Shuffle {
    red alpha
    green alpha
    blue alpha
    alpha black
    name Shuffle3
    xpos 440
    ypos -346
   }
   Group {
    name Edge2Vec2
    xpos 440
    ypos -322
   }
    Input {
     inputs 0
     name Input1
     xpos -172
     ypos -315
    }
    Clamp {
     channels rgb
     name Clamp1
     xpos -172
     ypos -250
    }
set N18e96d50 [stack 0]
    Position {
     translate {0 1}
     name Position2
     xpos -63
     ypos -106
    }
push $N18e96d50
    Merge2 {
     inputs 2
     operation minus
     name Merge2
     xpos -103
     ypos -28
    }
push $N18e96d50
    Position {
     translate {1 0}
     name Position1
     xpos -285
     ypos -98
    }
push $N18e96d50
    Merge2 {
     inputs 2
     operation minus
     name Merge1
     xpos -253
     ypos -29
    }
    Copy {
     inputs 2
     from0 rgba.green
     to0 rgba.green
     name Copy3
     xpos -179
     ypos 27
    }
    Grade {
     channels {rgba.red rgba.green -rgba.blue none}
     multiply {{Input1.height*Grade1.height i} {Input1.height*Grade1.height i} {curve i} {curve i}}
     black_clamp false
     name Grade1
     xpos -179
     ypos 196
     addUserKnob {20 User}
     addUserKnob {7 height l Height}
     height 1
     addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
    }
set N155c3180 [stack 0]
push $N155c3180
    Expression {
     channel0 rgb
     expr0 sqrt((r*r)+(g*g)+(b*b))
     name VectorLength
     selected true
     xpos -260
     ypos 278
    }
    Merge2 {
     inputs 2
     operation divide
     name Merge4
     selected true
     xpos -179
     ypos 350
    }
    Output {
     name Output1
     xpos -179
     ypos 494
    }
   end_group
   Blur {
    channels rgb
    size {{parent.preblurVector i}}
    name Blur5
    label "pre blur vector"
    xpos 440
    ypos -296
   }
push $N24510860
   ShuffleCopy {
    inputs 2
    red red
    green green
    out forward
    name ShuffleCopy1
    label "rg to forward"
    xpos 556
    ypos -194
   }
   VectorBlur {
    channels rgba
    uv forward
    scale {{vector_length i}}
    offset 0
    alpha -rgba.alpha
    maskChannelMask -rgba.alpha
    maskChannelInput -rgba.alpha
    name VectorBlur2
    xpos 556
    ypos -139
   }
   CopyBBox {
    inputs 2
    name CopyBBox1
    xpos 556
    ypos -92
   }
   Output {
    name Output1
    xpos 556
    ypos -8
   }
  end_group
  Keymix {
   inputs 3
   channels rgb
   name Keymix11
   xpos 1325
   ypos 751
  }
set N244b38c0 [stack 0]
push $N244b38c0
push $N244b38c0
push $N244b38c0
  Group {
   inputs 2
   name ExtendEdge1
   help "Very useful as a super unpremultiplier.  The input matte is used as the source edge to extend the input colour channels beyond their existing alpha.  It can also be used to do dilate/erode operations on an alpha. The effect can be extended by using multiple copies.  The result should probably be re-comped with the original using an edge matte through a KeyMix so that only the desired areas are used.  "
   xpos 1509
   ypos 743
   addUserKnob {20 Controls}
   addUserKnob {7 preblurVector R 0 10}
   preblurVector {{parent.ExtendEdge.preblurVector i}}
   addUserKnob {41 scale l "vector length" T VectorBlur2.scale}
  }
   Input {
    inputs 0
    name Input
    xpos 556
    ypos -426
   }
set N2454ad90 [stack 0]
   Dot {
    name Dot1
    xpos 707
    ypos -414
   }
   Dot {
    name Dot2
    xpos 707
    ypos -121
   }
   Input {
    inputs 0
    name matte
    xpos 440
    ypos -424
    number 1
   }
   Shuffle {
    red alpha
    green alpha
    blue alpha
    alpha black
    name Shuffle3
    xpos 440
    ypos -346
   }
   Group {
    name Edge2Vec2
    xpos 440
    ypos -322
   }
    Input {
     inputs 0
     name Input1
     xpos -172
     ypos -315
    }
    Clamp {
     channels rgb
     name Clamp1
     xpos -172
     ypos -250
    }
set N15927780 [stack 0]
    Position {
     translate {0 1}
     name Position2
     xpos -63
     ypos -106
    }
push $N15927780
    Merge2 {
     inputs 2
     operation minus
     name Merge2
     xpos -103
     ypos -28
    }
push $N15927780
    Position {
     translate {1 0}
     name Position1
     xpos -285
     ypos -98
    }
push $N15927780
    Merge2 {
     inputs 2
     operation minus
     name Merge1
     xpos -253
     ypos -29
    }
    Copy {
     inputs 2
     from0 rgba.green
     to0 rgba.green
     name Copy3
     xpos -179
     ypos 27
    }
    Grade {
     channels {rgba.red rgba.green -rgba.blue none}
     multiply {{Input1.height*Grade1.height i} {Input1.height*Grade1.height i} {curve i} {curve i}}
     black_clamp false
     name Grade1
     xpos -179
     ypos 196
     addUserKnob {20 User}
     addUserKnob {7 height l Height}
     height 1
     addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
    }
set N26c20640 [stack 0]
push $N26c20640
    Expression {
     channel0 rgb
     expr0 sqrt((r*r)+(g*g)+(b*b))
     name VectorLength
     selected true
     xpos -260
     ypos 278
    }
    Merge2 {
     inputs 2
     operation divide
     name Merge4
     selected true
     xpos -179
     ypos 350
    }
    Output {
     name Output1
     xpos -179
     ypos 494
    }
   end_group
   Blur {
    channels rgb
    size {{parent.preblurVector i}}
    name Blur5
    label "pre blur vector"
    xpos 440
    ypos -296
   }
push $N2454ad90
   ShuffleCopy {
    inputs 2
    red red
    green green
    out forward
    name ShuffleCopy1
    label "rg to forward"
    xpos 556
    ypos -194
   }
   VectorBlur {
    channels rgba
    uv forward
    scale {{parent.parent.ExtendEdge.VectorBlur2.scale i}}
    offset 0
    alpha -rgba.alpha
    maskChannelMask -rgba.alpha
    maskChannelInput -rgba.alpha
    name VectorBlur2
    xpos 556
    ypos -139
   }
   CopyBBox {
    inputs 2
    name CopyBBox1
    xpos 556
    ypos -92
   }
   Output {
    name Output1
    xpos 556
    ypos -8
   }
  end_group
  Keymix {
   inputs 3
   channels rgb
   name Keymix12
   xpos 1509
   ypos 823
  }
set N190ae930 [stack 0]
push $N190ae930
push $N190ae930
push $N190ae930
  Group {
   inputs 2
   name ExtendEdge2
   help "Very useful as a super unpremultiplier.  The input matte is used as the source edge to extend the input colour channels beyond their existing alpha.  It can also be used to do dilate/erode operations on an alpha. The effect can be extended by using multiple copies.  The result should probably be re-comped with the original using an edge matte through a KeyMix so that only the desired areas are used.  "
   xpos 1695
   ypos 823
   addUserKnob {20 Controls}
   addUserKnob {7 preblurVector R 0 10}
   preblurVector {{parent.ExtendEdge.preblurVector}}
   addUserKnob {41 scale l "vector length" T VectorBlur2.scale}
  }
   Input {
    inputs 0
    name Input
    xpos 556
    ypos -426
   }
set Nebc10f0 [stack 0]
   Dot {
    name Dot1
    xpos 707
    ypos -414
   }
   Dot {
    name Dot2
    xpos 707
    ypos -121
   }
   Input {
    inputs 0
    name matte
    xpos 440
    ypos -424
    number 1
   }
   Shuffle {
    red alpha
    green alpha
    blue alpha
    alpha black
    name Shuffle3
    xpos 440
    ypos -346
   }
   Group {
    name Edge2Vec2
    xpos 440
    ypos -322
   }
    Input {
     inputs 0
     name Input1
     xpos -172
     ypos -315
    }
    Clamp {
     channels rgb
     name Clamp1
     xpos -172
     ypos -250
    }
set N24737e50 [stack 0]
    Position {
     translate {0 1}
     name Position2
     xpos -63
     ypos -106
    }
push $N24737e50
    Merge2 {
     inputs 2
     operation minus
     name Merge2
     xpos -103
     ypos -28
    }
push $N24737e50
    Position {
     translate {1 0}
     name Position1
     xpos -285
     ypos -98
    }
push $N24737e50
    Merge2 {
     inputs 2
     operation minus
     name Merge1
     xpos -253
     ypos -29
    }
    Copy {
     inputs 2
     from0 rgba.green
     to0 rgba.green
     name Copy3
     xpos -179
     ypos 27
    }
    Grade {
     channels {rgba.red rgba.green -rgba.blue none}
     multiply {{Input1.height*Grade1.height i} {Input1.height*Grade1.height i} {curve i} {curve i}}
     black_clamp false
     name Grade1
     xpos -179
     ypos 196
     addUserKnob {20 User}
     addUserKnob {7 height l Height}
     height 1
     addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
    }
set N1577fb70 [stack 0]
push $N1577fb70
    Expression {
     channel0 rgb
     expr0 sqrt((r*r)+(g*g)+(b*b))
     name VectorLength
     selected true
     xpos -260
     ypos 278
    }
    Merge2 {
     inputs 2
     operation divide
     name Merge4
     selected true
     xpos -179
     ypos 350
    }
    Output {
     name Output1
     xpos -179
     ypos 494
    }
   end_group
   Blur {
    channels rgb
    size {{parent.preblurVector i}}
    name Blur5
    label "pre blur vector"
    xpos 440
    ypos -296
   }
push $Nebc10f0
   ShuffleCopy {
    inputs 2
    red red
    green green
    out forward
    name ShuffleCopy1
    label "rg to forward"
    xpos 556
    ypos -194
   }
   VectorBlur {
    channels rgba
    uv forward
    scale {{parent.parent.ExtendEdge.VectorBlur2.scale i}}
    offset 0
    alpha -rgba.alpha
    maskChannelMask -rgba.alpha
    maskChannelInput -rgba.alpha
    name VectorBlur2
    xpos 556
    ypos -139
   }
   CopyBBox {
    inputs 2
    name CopyBBox1
    xpos 556
    ypos -92
   }
   Output {
    name Output1
    xpos 556
    ypos -8
   }
  end_group
  Keymix {
   inputs 3
   channels rgb
   name Keymix13
   xpos 1695
   ypos 895
  }
set N16bdc810 [stack 0]
push $N16bdc810
push $N16bdc810
push $N16bdc810
  Group {
   inputs 2
   name ExtendEdge3
   help "Very useful as a super unpremultiplier.  The input matte is used as the source edge to extend the input colour channels beyond their existing alpha.  It can also be used to do dilate/erode operations on an alpha. The effect can be extended by using multiple copies.  The result should probably be re-comped with the original using an edge matte through a KeyMix so that only the desired areas are used.  "
   xpos 1891
   ypos 895
   addUserKnob {20 Controls}
   addUserKnob {7 preblurVector R 0 10}
   preblurVector {{parent.ExtendEdge.preblurVector}}
   addUserKnob {41 scale l "vector length" T VectorBlur2.scale}
  }
   Input {
    inputs 0
    name Input
    xpos 556
    ypos -426
   }
set N29eadc50 [stack 0]
   Dot {
    name Dot1
    xpos 707
    ypos -414
   }
   Dot {
    name Dot2
    xpos 707
    ypos -121
   }
   Input {
    inputs 0
    name matte
    xpos 440
    ypos -424
    number 1
   }
   Shuffle {
    red alpha
    green alpha
    blue alpha
    alpha black
    name Shuffle3
    xpos 440
    ypos -346
   }
   Group {
    name Edge2Vec2
    xpos 440
    ypos -322
   }
    Input {
     inputs 0
     name Input1
     xpos -172
     ypos -315
    }
    Clamp {
     channels rgb
     name Clamp1
     xpos -172
     ypos -250
    }
set N29ed3520 [stack 0]
    Position {
     translate {0 1}
     name Position2
     xpos -63
     ypos -106
    }
push $N29ed3520
    Merge2 {
     inputs 2
     operation minus
     name Merge2
     xpos -103
     ypos -28
    }
push $N29ed3520
    Position {
     translate {1 0}
     name Position1
     xpos -285
     ypos -98
    }
push $N29ed3520
    Merge2 {
     inputs 2
     operation minus
     name Merge1
     xpos -253
     ypos -29
    }
    Copy {
     inputs 2
     from0 rgba.green
     to0 rgba.green
     name Copy3
     xpos -179
     ypos 27
    }
    Grade {
     channels {rgba.red rgba.green -rgba.blue none}
     multiply {{Input1.height*Grade1.height i} {Input1.height*Grade1.height i} {curve i} {curve i}}
     black_clamp false
     name Grade1
     xpos -179
     ypos 196
     addUserKnob {20 User}
     addUserKnob {7 height l Height}
     height 1
     addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
    }
set N231daf10 [stack 0]
push $N231daf10
    Expression {
     channel0 rgb
     expr0 sqrt((r*r)+(g*g)+(b*b))
     name VectorLength
     selected true
     xpos -260
     ypos 278
    }
    Merge2 {
     inputs 2
     operation divide
     name Merge4
     selected true
     xpos -179
     ypos 350
    }
    Output {
     name Output1
     xpos -179
     ypos 494
    }
   end_group
   Blur {
    channels rgb
    size {{parent.preblurVector i}}
    name Blur5
    label "pre blur vector"
    xpos 440
    ypos -296
   }
push $N29eadc50
   ShuffleCopy {
    inputs 2
    red red
    green green
    out forward
    name ShuffleCopy1
    label "rg to forward"
    xpos 556
    ypos -194
   }
   VectorBlur {
    channels rgba
    uv forward
    scale {{parent.parent.ExtendEdge.VectorBlur2.scale i}}
    offset 0
    alpha -rgba.alpha
    maskChannelMask -rgba.alpha
    maskChannelInput -rgba.alpha
    name VectorBlur2
    xpos 556
    ypos -139
   }
   CopyBBox {
    inputs 2
    name CopyBBox1
    xpos 556
    ypos -92
   }
   Output {
    name Output1
    xpos 556
    ypos -8
   }
  end_group
  Keymix {
   inputs 3
   channels rgb
   name Keymix14
   xpos 1891
   ypos 967
  }
set N232490e0 [stack 0]
push $N232490e0
push $N232490e0
push $N232490e0
  Group {
   inputs 2
   name ExtendEdge4
   help "Very useful as a super unpremultiplier.  The input matte is used as the source edge to extend the input colour channels beyond their existing alpha.  It can also be used to do dilate/erode operations on an alpha. The effect can be extended by using multiple copies.  The result should probably be re-comped with the original using an edge matte through a KeyMix so that only the desired areas are used.  "
   xpos 2077
   ypos 967
   addUserKnob {20 Controls}
   addUserKnob {7 preblurVector R 0 10}
   preblurVector {{parent.ExtendEdge.preblurVector}}
   addUserKnob {41 scale l "vector length" T VectorBlur2.scale}
  }
   Input {
    inputs 0
    name Input
    xpos 556
    ypos -426
   }
set N2325b010 [stack 0]
   Dot {
    name Dot1
    xpos 707
    ypos -414
   }
   Dot {
    name Dot2
    xpos 707
    ypos -121
   }
   Input {
    inputs 0
    name matte
    xpos 440
    ypos -424
    number 1
   }
   Shuffle {
    red alpha
    green alpha
    blue alpha
    alpha black
    name Shuffle3
    xpos 440
    ypos -346
   }
   Group {
    name Edge2Vec2
    xpos 440
    ypos -322
   }
    Input {
     inputs 0
     name Input1
     xpos -172
     ypos -315
    }
    Clamp {
     channels rgb
     name Clamp1
     xpos -172
     ypos -250
    }
set N2328b250 [stack 0]
    Position {
     translate {0 1}
     name Position2
     xpos -63
     ypos -106
    }
push $N2328b250
    Merge2 {
     inputs 2
     operation minus
     name Merge2
     xpos -103
     ypos -28
    }
push $N2328b250
    Position {
     translate {1 0}
     name Position1
     xpos -285
     ypos -98
    }
push $N2328b250
    Merge2 {
     inputs 2
     operation minus
     name Merge1
     xpos -253
     ypos -29
    }
    Copy {
     inputs 2
     from0 rgba.green
     to0 rgba.green
     name Copy3
     xpos -179
     ypos 27
    }
    Grade {
     channels {rgba.red rgba.green -rgba.blue none}
     multiply {{Input1.height*Grade1.height i} {Input1.height*Grade1.height i} {curve i} {curve i}}
     black_clamp false
     name Grade1
     xpos -179
     ypos 196
     addUserKnob {20 User}
     addUserKnob {7 height l Height}
     height 1
     addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
    }
set N232d8a20 [stack 0]
push $N232d8a20
    Expression {
     channel0 rgb
     expr0 sqrt((r*r)+(g*g)+(b*b))
     name VectorLength
     selected true
     xpos -260
     ypos 278
    }
    Merge2 {
     inputs 2
     operation divide
     name Merge4
     selected true
     xpos -179
     ypos 350
    }
    Output {
     name Output1
     xpos -179
     ypos 494
    }
   end_group
   Blur {
    channels rgb
    size {{parent.preblurVector i}}
    name Blur5
    label "pre blur vector"
    xpos 440
    ypos -296
   }
push $N2325b010
   ShuffleCopy {
    inputs 2
    red red
    green green
    out forward
    name ShuffleCopy1
    label "rg to forward"
    xpos 556
    ypos -194
   }
   VectorBlur {
    channels rgba
    uv forward
    scale {{parent.parent.ExtendEdge.VectorBlur2.scale i}}
    offset 0
    alpha -rgba.alpha
    maskChannelMask -rgba.alpha
    maskChannelInput -rgba.alpha
    name VectorBlur2
    xpos 556
    ypos -139
   }
   CopyBBox {
    inputs 2
    name CopyBBox1
    xpos 556
    ypos -92
   }
   Output {
    name Output1
    xpos 556
    ypos -8
   }
  end_group
  Keymix {
   inputs 3
   channels rgb
   name Keymix15
   xpos 2077
   ypos 1039
  }
set N23346b80 [stack 0]
push $N23346b80
push $N23346b80
push $N23346b80
  Group {
   inputs 2
   name ExtendEdge5
   help "Very useful as a super unpremultiplier.  The input matte is used as the source edge to extend the input colour channels beyond their existing alpha.  It can also be used to do dilate/erode operations on an alpha. The effect can be extended by using multiple copies.  The result should probably be re-comped with the original using an edge matte through a KeyMix so that only the desired areas are used.  "
   xpos 2263
   ypos 1039
   addUserKnob {20 Controls}
   addUserKnob {7 preblurVector R 0 10}
   preblurVector {{parent.ExtendEdge.preblurVector i}}
   addUserKnob {41 scale l "vector length" T VectorBlur2.scale}
  }
   Input {
    inputs 0
    name Input
    xpos 556
    ypos -426
   }
set N23358b30 [stack 0]
   Dot {
    name Dot1
    xpos 707
    ypos -414
   }
   Dot {
    name Dot2
    xpos 707
    ypos -121
   }
   Input {
    inputs 0
    name matte
    xpos 440
    ypos -424
    number 1
   }
   Shuffle {
    red alpha
    green alpha
    blue alpha
    alpha black
    name Shuffle3
    xpos 440
    ypos -346
   }
   Group {
    name Edge2Vec2
    xpos 440
    ypos -322
   }
    Input {
     inputs 0
     name Input1
     xpos -172
     ypos -315
    }
    Clamp {
     channels rgb
     name Clamp1
     xpos -172
     ypos -250
    }
set N23388d70 [stack 0]
    Position {
     translate {0 1}
     name Position2
     xpos -63
     ypos -106
    }
push $N23388d70
    Merge2 {
     inputs 2
     operation minus
     name Merge2
     xpos -103
     ypos -28
    }
push $N23388d70
    Position {
     translate {1 0}
     name Position1
     xpos -285
     ypos -98
    }
push $N23388d70
    Merge2 {
     inputs 2
     operation minus
     name Merge1
     xpos -253
     ypos -29
    }
    Copy {
     inputs 2
     from0 rgba.green
     to0 rgba.green
     name Copy3
     xpos -179
     ypos 27
    }
    Grade {
     channels {rgba.red rgba.green -rgba.blue none}
     multiply {{Input1.height*Grade1.height i} {Input1.height*Grade1.height i} {curve i} {curve i}}
     black_clamp false
     name Grade1
     xpos -179
     ypos 196
     addUserKnob {20 User}
     addUserKnob {7 height l Height}
     height 1
     addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
    }
set N233d6540 [stack 0]
push $N233d6540
    Expression {
     channel0 rgb
     expr0 sqrt((r*r)+(g*g)+(b*b))
     name VectorLength
     selected true
     xpos -260
     ypos 278
    }
    Merge2 {
     inputs 2
     operation divide
     name Merge4
     selected true
     xpos -179
     ypos 350
    }
    Output {
     name Output1
     xpos -179
     ypos 494
    }
   end_group
   Blur {
    channels rgb
    size {{parent.preblurVector i}}
    name Blur5
    label "pre blur vector"
    xpos 440
    ypos -296
   }
push $N23358b30
   ShuffleCopy {
    inputs 2
    red red
    green green
    out forward
    name ShuffleCopy1
    label "rg to forward"
    xpos 556
    ypos -194
   }
   VectorBlur {
    channels rgba
    uv forward
    scale {{parent.parent.ExtendEdge.VectorBlur2.scale i}}
    offset 0
    alpha -rgba.alpha
    maskChannelMask -rgba.alpha
    maskChannelInput -rgba.alpha
    name VectorBlur2
    xpos 556
    ypos -139
   }
   CopyBBox {
    inputs 2
    name CopyBBox1
    xpos 556
    ypos -92
   }
   Output {
    name Output1
    xpos 556
    ypos -8
   }
  end_group
  Keymix {
   inputs 3
   channels rgb
   name Keymix16
   xpos 2263
   ypos 1111
  }
set N234446a0 [stack 0]
push $N234446a0
push $N234446a0
push $N234446a0
  Group {
   inputs 2
   name ExtendEdge6
   help "Very useful as a super unpremultiplier.  The input matte is used as the source edge to extend the input colour channels beyond their existing alpha.  It can also be used to do dilate/erode operations on an alpha. The effect can be extended by using multiple copies.  The result should probably be re-comped with the original using an edge matte through a KeyMix so that only the desired areas are used.  "
   xpos 2449
   ypos 1111
   addUserKnob {20 Controls}
   addUserKnob {7 preblurVector R 0 10}
   preblurVector {{parent.ExtendEdge.preblurVector}}
   addUserKnob {41 scale l "vector length" T VectorBlur2.scale}
  }
   Input {
    inputs 0
    name Input
    xpos 556
    ypos -426
   }
set N23456710 [stack 0]
   Dot {
    name Dot1
    xpos 707
    ypos -414
   }
   Dot {
    name Dot2
    xpos 707
    ypos -121
   }
   Input {
    inputs 0
    name matte
    xpos 440
    ypos -424
    number 1
   }
   Shuffle {
    red alpha
    green alpha
    blue alpha
    alpha black
    name Shuffle3
    xpos 440
    ypos -346
   }
   Group {
    name Edge2Vec2
    xpos 440
    ypos -322
   }
    Input {
     inputs 0
     name Input1
     xpos -172
     ypos -315
    }
    Clamp {
     channels rgb
     name Clamp1
     xpos -172
     ypos -250
    }
set N23486950 [stack 0]
    Position {
     translate {0 1}
     name Position2
     xpos -63
     ypos -106
    }
push $N23486950
    Merge2 {
     inputs 2
     operation minus
     name Merge2
     xpos -103
     ypos -28
    }
push $N23486950
    Position {
     translate {1 0}
     name Position1
     xpos -285
     ypos -98
    }
push $N23486950
    Merge2 {
     inputs 2
     operation minus
     name Merge1
     xpos -253
     ypos -29
    }
    Copy {
     inputs 2
     from0 rgba.green
     to0 rgba.green
     name Copy3
     xpos -179
     ypos 27
    }
    Grade {
     channels {rgba.red rgba.green -rgba.blue none}
     multiply {{Input1.height*Grade1.height i} {Input1.height*Grade1.height i} {curve i} {curve i}}
     black_clamp false
     name Grade1
     xpos -179
     ypos 196
     addUserKnob {20 User}
     addUserKnob {7 height l Height}
     height 1
     addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
    }
set N234d4120 [stack 0]
push $N234d4120
    Expression {
     channel0 rgb
     expr0 sqrt((r*r)+(g*g)+(b*b))
     name VectorLength
     selected true
     xpos -260
     ypos 278
    }
    Merge2 {
     inputs 2
     operation divide
     name Merge4
     selected true
     xpos -179
     ypos 350
    }
    Output {
     name Output1
     xpos -179
     ypos 494
    }
   end_group
   Blur {
    channels rgb
    size {{parent.preblurVector i}}
    name Blur5
    label "pre blur vector"
    xpos 440
    ypos -296
   }
push $N23456710
   ShuffleCopy {
    inputs 2
    red red
    green green
    out forward
    name ShuffleCopy1
    label "rg to forward"
    xpos 556
    ypos -194
   }
   VectorBlur {
    channels rgba
    uv forward
    scale {{parent.parent.ExtendEdge.VectorBlur2.scale i}}
    offset 0
    alpha -rgba.alpha
    maskChannelMask -rgba.alpha
    maskChannelInput -rgba.alpha
    name VectorBlur2
    xpos 556
    ypos -139
   }
   CopyBBox {
    inputs 2
    name CopyBBox1
    xpos 556
    ypos -92
   }
   Output {
    name Output1
    xpos 556
    ypos -8
   }
  end_group
  Keymix {
   inputs 3
   channels rgb
   name Keymix17
   xpos 2449
   ypos 1183
  }
set N23542280 [stack 0]
push $N23542280
push $N23542280
push $N23542280
  Group {
   inputs 2
   name ExtendEdge7
   help "Very useful as a super unpremultiplier.  The input matte is used as the source edge to extend the input colour channels beyond their existing alpha.  It can also be used to do dilate/erode operations on an alpha. The effect can be extended by using multiple copies.  The result should probably be re-comped with the original using an edge matte through a KeyMix so that only the desired areas are used.  "
   xpos 2635
   ypos 1183
   addUserKnob {20 Controls}
   addUserKnob {7 preblurVector R 0 10}
   preblurVector {{parent.ExtendEdge.preblurVector}}
   addUserKnob {41 scale l "vector length" T VectorBlur2.scale}
  }
   Input {
    inputs 0
    name Input
    xpos 556
    ypos -426
   }
set N23554230 [stack 0]
   Dot {
    name Dot1
    xpos 707
    ypos -414
   }
   Dot {
    name Dot2
    xpos 707
    ypos -121
   }
   Input {
    inputs 0
    name matte
    xpos 440
    ypos -424
    number 1
   }
   Shuffle {
    red alpha
    green alpha
    blue alpha
    alpha black
    name Shuffle3
    xpos 440
    ypos -346
   }
   Group {
    name Edge2Vec2
    xpos 440
    ypos -322
   }
    Input {
     inputs 0
     name Input1
     xpos -172
     ypos -315
    }
    Clamp {
     channels rgb
     name Clamp1
     xpos -172
     ypos -250
    }
set N23584470 [stack 0]
    Position {
     translate {0 1}
     name Position2
     xpos -63
     ypos -106
    }
push $N23584470
    Merge2 {
     inputs 2
     operation minus
     name Merge2
     xpos -103
     ypos -28
    }
push $N23584470
    Position {
     translate {1 0}
     name Position1
     xpos -285
     ypos -98
    }
push $N23584470
    Merge2 {
     inputs 2
     operation minus
     name Merge1
     xpos -253
     ypos -29
    }
    Copy {
     inputs 2
     from0 rgba.green
     to0 rgba.green
     name Copy3
     xpos -179
     ypos 27
    }
    Grade {
     channels {rgba.red rgba.green -rgba.blue none}
     multiply {{Input1.height*Grade1.height i} {Input1.height*Grade1.height i} {curve i} {curve i}}
     black_clamp false
     name Grade1
     xpos -179
     ypos 196
     addUserKnob {20 User}
     addUserKnob {7 height l Height}
     height 1
     addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
    }
set N235d1c40 [stack 0]
push $N235d1c40
    Expression {
     channel0 rgb
     expr0 sqrt((r*r)+(g*g)+(b*b))
     name VectorLength
     selected true
     xpos -260
     ypos 278
    }
    Merge2 {
     inputs 2
     operation divide
     name Merge4
     selected true
     xpos -179
     ypos 350
    }
    Output {
     name Output1
     xpos -179
     ypos 494
    }
   end_group
   Blur {
    channels rgb
    size {{parent.preblurVector i}}
    name Blur5
    label "pre blur vector"
    xpos 440
    ypos -296
   }
push $N23554230
   ShuffleCopy {
    inputs 2
    red red
    green green
    out forward
    name ShuffleCopy1
    label "rg to forward"
    xpos 556
    ypos -194
   }
   VectorBlur {
    channels rgba
    uv forward
    scale {{parent.parent.ExtendEdge.VectorBlur2.scale i}}
    offset 0
    alpha -rgba.alpha
    maskChannelMask -rgba.alpha
    maskChannelInput -rgba.alpha
    name VectorBlur2
    xpos 556
    ypos -139
   }
   CopyBBox {
    inputs 2
    name CopyBBox1
    xpos 556
    ypos -92
   }
   Output {
    name Output1
    xpos 556
    ypos -8
   }
  end_group
  Keymix {
   inputs 3
   channels rgb
   name Keymix18
   xpos 2635
   ypos 1255
  }
set N2363fda0 [stack 0]
push $N2363fda0
push $N2363fda0
push $N2363fda0
  Group {
   inputs 2
   name ExtendEdge8
   help "Very useful as a super unpremultiplier.  The input matte is used as the source edge to extend the input colour channels beyond their existing alpha.  It can also be used to do dilate/erode operations on an alpha. The effect can be extended by using multiple copies.  The result should probably be re-comped with the original using an edge matte through a KeyMix so that only the desired areas are used.  "
   xpos 2829
   ypos 1255
   addUserKnob {20 Controls}
   addUserKnob {7 preblurVector R 0 10}
   preblurVector {{parent.ExtendEdge.preblurVector}}
   addUserKnob {41 scale l "vector length" T VectorBlur2.scale}
  }
   Input {
    inputs 0
    name Input
    xpos 556
    ypos -426
   }
set N23651d50 [stack 0]
   Dot {
    name Dot1
    xpos 707
    ypos -414
   }
   Dot {
    name Dot2
    xpos 707
    ypos -121
   }
   Input {
    inputs 0
    name matte
    xpos 440
    ypos -424
    number 1
   }
   Shuffle {
    red alpha
    green alpha
    blue alpha
    alpha black
    name Shuffle3
    xpos 440
    ypos -346
   }
   Group {
    name Edge2Vec2
    xpos 440
    ypos -322
   }
    Input {
     inputs 0
     name Input1
     xpos -172
     ypos -315
    }
    Clamp {
     channels rgb
     name Clamp1
     xpos -172
     ypos -250
    }
set N23681f90 [stack 0]
    Position {
     translate {0 1}
     name Position2
     xpos -63
     ypos -106
    }
push $N23681f90
    Merge2 {
     inputs 2
     operation minus
     name Merge2
     xpos -103
     ypos -28
    }
push $N23681f90
    Position {
     translate {1 0}
     name Position1
     xpos -285
     ypos -98
    }
push $N23681f90
    Merge2 {
     inputs 2
     operation minus
     name Merge1
     xpos -253
     ypos -29
    }
    Copy {
     inputs 2
     from0 rgba.green
     to0 rgba.green
     name Copy3
     xpos -179
     ypos 27
    }
    Grade {
     channels {rgba.red rgba.green -rgba.blue none}
     multiply {{Input1.height*Grade1.height i} {Input1.height*Grade1.height i} {curve i} {curve i}}
     black_clamp false
     name Grade1
     xpos -179
     ypos 196
     addUserKnob {20 User}
     addUserKnob {7 height l Height}
     height 1
     addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
    }
set N236cf760 [stack 0]
push $N236cf760
    Expression {
     channel0 rgb
     expr0 sqrt((r*r)+(g*g)+(b*b))
     name VectorLength
     selected true
     xpos -260
     ypos 278
    }
    Merge2 {
     inputs 2
     operation divide
     name Merge4
     selected true
     xpos -179
     ypos 350
    }
    Output {
     name Output1
     xpos -179
     ypos 494
    }
   end_group
   Blur {
    channels rgb
    size {{parent.preblurVector i}}
    name Blur5
    label "pre blur vector"
    xpos 440
    ypos -296
   }
push $N23651d50
   ShuffleCopy {
    inputs 2
    red red
    green green
    out forward
    name ShuffleCopy1
    label "rg to forward"
    xpos 556
    ypos -194
   }
   VectorBlur {
    channels rgba
    uv forward
    scale {{parent.parent.ExtendEdge.VectorBlur2.scale i}}
    offset 0
    alpha -rgba.alpha
    maskChannelMask -rgba.alpha
    maskChannelInput -rgba.alpha
    name VectorBlur2
    xpos 556
    ypos -139
   }
   CopyBBox {
    inputs 2
    name CopyBBox1
    xpos 556
    ypos -92
   }
   Output {
    name Output1
    xpos 556
    ypos -8
   }
  end_group
  Keymix {
   inputs 3
   channels rgb
   name Keymix19
   xpos 2829
   ypos 1327
  }
set N2373d8c0 [stack 0]
push $N2373d8c0
push $N2373d8c0
push $N2373d8c0
  Group {
   inputs 2
   name ExtendEdge9
   help "Very useful as a super unpremultiplier.  The input matte is used as the source edge to extend the input colour channels beyond their existing alpha.  It can also be used to do dilate/erode operations on an alpha. The effect can be extended by using multiple copies.  The result should probably be re-comped with the original using an edge matte through a KeyMix so that only the desired areas are used.  "
   xpos 3023
   ypos 1327
   addUserKnob {20 Controls}
   addUserKnob {7 preblurVector R 0 10}
   preblurVector {{parent.ExtendEdge.preblurVector i}}
   addUserKnob {41 scale l "vector length" T VectorBlur2.scale}
  }
   Input {
    inputs 0
    name Input
    xpos 556
    ypos -426
   }
set N2374f870 [stack 0]
   Dot {
    name Dot1
    xpos 707
    ypos -414
   }
   Dot {
    name Dot2
    xpos 707
    ypos -121
   }
   Input {
    inputs 0
    name matte
    xpos 440
    ypos -424
    number 1
   }
   Shuffle {
    red alpha
    green alpha
    blue alpha
    alpha black
    name Shuffle3
    xpos 440
    ypos -346
   }
   Group {
    name Edge2Vec2
    xpos 440
    ypos -322
   }
    Input {
     inputs 0
     name Input1
     xpos -172
     ypos -315
    }
    Clamp {
     channels rgb
     name Clamp1
     xpos -172
     ypos -250
    }
set N2377fab0 [stack 0]
    Position {
     translate {0 1}
     name Position2
     xpos -63
     ypos -106
    }
push $N2377fab0
    Merge2 {
     inputs 2
     operation minus
     name Merge2
     xpos -103
     ypos -28
    }
push $N2377fab0
    Position {
     translate {1 0}
     name Position1
     xpos -285
     ypos -98
    }
push $N2377fab0
    Merge2 {
     inputs 2
     operation minus
     name Merge1
     xpos -253
     ypos -29
    }
    Copy {
     inputs 2
     from0 rgba.green
     to0 rgba.green
     name Copy3
     xpos -179
     ypos 27
    }
    Grade {
     channels {rgba.red rgba.green -rgba.blue none}
     multiply {{Input1.height*Grade1.height i} {Input1.height*Grade1.height i} {curve i} {curve i}}
     black_clamp false
     name Grade1
     xpos -179
     ypos 196
     addUserKnob {20 User}
     addUserKnob {7 height l Height}
     height 1
     addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
    }
set N237cd280 [stack 0]
push $N237cd280
    Expression {
     channel0 rgb
     expr0 sqrt((r*r)+(g*g)+(b*b))
     name VectorLength
     selected true
     xpos -260
     ypos 278
    }
    Merge2 {
     inputs 2
     operation divide
     name Merge4
     selected true
     xpos -179
     ypos 350
    }
    Output {
     name Output1
     xpos -179
     ypos 494
    }
   end_group
   Blur {
    channels rgb
    size {{parent.preblurVector i}}
    name Blur5
    label "pre blur vector"
    xpos 440
    ypos -296
   }
push $N2374f870
   ShuffleCopy {
    inputs 2
    red red
    green green
    out forward
    name ShuffleCopy1
    label "rg to forward"
    xpos 556
    ypos -194
   }
   VectorBlur {
    channels rgba
    uv forward
    scale {{parent.parent.ExtendEdge.VectorBlur2.scale i}}
    offset 0
    alpha -rgba.alpha
    maskChannelMask -rgba.alpha
    maskChannelInput -rgba.alpha
    name VectorBlur2
    xpos 556
    ypos -139
   }
   CopyBBox {
    inputs 2
    name CopyBBox1
    xpos 556
    ypos -92
   }
   Output {
    name Output1
    xpos 556
    ypos -8
   }
  end_group
  Keymix {
   inputs 3
   channels rgb
   name Keymix20
   xpos 3023
   ypos 1399
  }
push $N2373d8c0
push $N2363fda0
push $N23542280
push $N234446a0
push $N23346b80
push $N232490e0
push $N16bdc810
push $N190ae930
push $N244b38c0
push $Nb349b40
  Switch {
   inputs 11
   which {{parent.slices}}
   name Switch3
   xpos 2018
   ypos 2366
  }
set N238441b0 [stack 0]
  Shuffle {
   in forward
   blue black
   alpha black
   name Shuffle1
   xpos 2116
   ypos 2425
  }
set N2384c5d0 [stack 0]
  Expression {
   expr0 (r+1)/2
   expr1 (g+1)/2
   name Expression1
   xpos 2116
   ypos 2476
  }
push $N2384c5d0
push $N238441b0
  Switch {
   inputs 3
   which {{parent.output}}
   name Switch1
   xpos 2018
   ypos 2501
  }
push $N2ef7b9f0
  Copy {
   inputs 2
   from0 -rgba.alpha
   to0 -rgba.alpha
   channels rgb
   name Copy1
   xpos 2018
   ypos 2544
  }
  Merge2 {
   inputs 2+1
   operation copy
   name Merge1
   xpos 1369
   ypos 2765
   disable {{"!\[exists parent.input2] " i}}
  }
  Output {
   name Output1
   xpos 1369
   ypos 2837
  }
 end_group
push $N2b8bf2f0
 Merge2 {
  inputs 2
  operation out
  name Merge1
  label static
  xpos 104
  ypos -456
 }
 Blur {
  size {{parent.size.w} {parent.size.h}}
  name Blur1
 }
push $N2b8bf2f0
 Clamp {
  name Clamp1
  label static
  xpos 452
  ypos -570
 }
 Invert {
  name Invert1
  label static
  xpos 437
  ypos -522
 }
 Blur {
  size {{parent.size.w} {parent.size.h}}
  name Blur2
 }
set N238cdd80 [stack 0]
 Grade {
  channels rgba
  blackpoint -0.0001
  name Grade1
  disable {{"parent.softEdges ? 0 : 1"}}
  addUserKnob {20 User}
  addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
 }
set N238dba30 [stack 0]
 Merge {
  inputs 2
  operation divide
  name Merge2
 }
 Blur {
  size {{parent.size.w} {parent.size.h}}
  name Blur3
 }
push $N238cdd80
push $N238dba30
 Merge {
  inputs 2
  operation divide
  name Merge3
 }
 Blur {
  size {{parent.size.w} {parent.size.h}}
  name Blur4
 }
set N23919270 [stack 0]
 Grade {
  channels rgba
  blackpoint -0.0001
  name Grade2
  disable {{"parent.softEdges ? 0 : 1"}}
  addUserKnob {20 User}
  addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
 }
set N23926dd0 [stack 0]
 Merge {
  inputs 2
  operation divide
  name Merge4
 }
 Blur {
  size {{parent.size.w} {parent.size.h}}
  name Blur5
 }
push $N23919270
push $N23926dd0
 Merge {
  inputs 2
  operation divide
  name Merge5
 }
 Blur {
  size {{parent.size.w} {parent.size.h}}
  name Blur6
 }
set N23963d90 [stack 0]
 Grade {
  channels rgba
  blackpoint -0.0001
  name Grade3
  disable {{"parent.softEdges ? 0 : 1"}}
  addUserKnob {20 User}
  addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
 }
set N239718f0 [stack 0]
 Merge {
  inputs 2
  operation divide
  name Merge6
 }
 Blur {
  size {{parent.size.w} {parent.size.h}}
  name Blur7
 }
push $N23963d90
push $N239718f0
 Merge {
  inputs 2
  operation divide
  name Merge7
 }
 Blur {
  size {{parent.size.w} {parent.size.h}}
  name Blur8
 }
set N239ae7e0 [stack 0]
 Grade {
  channels rgba
  blackpoint -0.0001
  name Grade4
  disable {{"parent.softEdges ? 0 : 1"}}
  addUserKnob {20 User}
  addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
 }
set N239bc340 [stack 0]
 Merge {
  inputs 2
  operation divide
  name Merge8
 }
 Blur {
  size {{parent.size.w} {parent.size.h}}
  name Blur9
 }
push $N239ae7e0
push $N239bc340
 Merge {
  inputs 2
  operation divide
  name Merge9
 }
 Blur {
  size {{parent.size.w} {parent.size.h}}
  name Blur10
 }
 Grade {
  channels rgba
  blackpoint -0.0001
  name Grade5
  disable {{"parent.softEdges ? 0 : 1"}}
  addUserKnob {20 User}
  addUserKnob {22 "keep luma" -STARTLINE T keepLuma()}
 }
 Merge {
  inputs 2
  operation divide
  name Merge10
 }
 Transform {
  rotate {{parent.angle*-1 i}}
  center {2048 1463}
  name Transform3
  label static
  xpos 1427
  ypos 514
 }
push $N2451e9a0
 Keymix {
  inputs 3
  name Keymix1
  label static
  xpos 250
  ypos 1620
 }
 ShuffleCopy {
  inputs 2
  name ShuffleCopy1
  label static
  xpos -665
  ypos 1748
  disable {{"parent.ignoreAlpha ? 0 : 1"}}
 }
push $N2451e9a0
 Dissolve {
  inputs 2
  which {{parent.mix i}}
  name Dissolve1
  label static
  xpos 95
  ypos 1843
 }
 Keymix {
  inputs 3
  invertMask true
  bbox B
  name Keymix2
  label static
  xpos -14
  ypos 1987
  disable {{"\[exists parent.input2] ? 0 : 1" x1 0}}
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  mix {{parent.replacealpha}}
  name Copy1
  label static
  xpos -98
  ypos 2074
 }
 ChannelMerge {
  inputs 2
  mix {{parent.outputAlpha}}
  name ChannelMerge1
  label static
  xpos -242
  ypos 2126
 }
 Output {
  name Output1
  label static
  xpos -161
  ypos 2240
 }
end_group
