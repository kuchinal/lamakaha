set cut_paste_input [stack 0]
version 10.5 v5
push $cut_paste_input
NoOp {
 name Stereo_Tools1
 tile_color 0xb2b2ff
 gl_color 0xffffffff
 note_font_size 41
 note_font_color 0xffffffff
 selected true
 xpos -1644
 ypos 3446
 addUserKnob {20 tab1 l "Stereo Walkthrough"}
 addUserKnob {3 delivery_version l "delivery version" t "version number of the latest delivery version\nmust match the one selected in the read node\n//////////\n- ftrack\n- click on stereocomp task \n- click on shotnr next to shot image \n- 'versions' - tab --> hover over latest delivery\n(also include the '0's, e.g. NNA3360_delivery1_DVY v003 => put 003 inside this text field)\n"}
 addUserKnob {26 div l "<font size='4'><b>Stereoelements</b>"}
 addUserKnob {22 delivery_read l "    create stereo fileout, delivery read and difference    " t "\nCreates the main stereo fileout, a read node directing to the shot's delivery folder (open and select the latest one) and a difference node (needed for the analysis tool).\n\nIf you have a fullcg shot, please deactivate the matchgrade node." T "## globals\n\ntst = nuke.toNode('TrixterShotData')\n\n## create stereofilout\n## start\n\ndef stereo_fileout():\n            \n        nuke.nodePaste(\"/corky/projects/MLD_343216/seq/etc/nuke/templates/Stereo/stereo_fileout.nk\")\n          \n        for n in nuke.selectedNodes():\n           n\['selected'].setValue(False)    \n\n        print (\"stereofileout script loaded...\")\n        return None\n## end\n\n## create read node\n## start\n\ndef stereo_read():\n\n    projectpath = tst.knob('projectpath').getValue()\n    seq = tst.knob('sequence').getValue()\n    shot = tst.knob('shot').getValue()\n    \n    nuke.createNode('Read', 'name read_delivery')\n    nuke.selectedNode().knob('file').setValue('%s/seq/%s/%s/delivery/images/versions/' % (projectpath, seq, shot))    \n    \n    print (\"read node created...\")\n    return None\n## end\n\n\n## create merge node and connect it to read and stereofileout\n## start\n\ndef stereo_merge():\n\n    merge = nuke.nodes.Merge2(operation=\"difference\", name='merge_diff')    \n    merge.setInput(0,delivery)\n    merge.setInput(1,colormatrix)\n\n    nuke.connectViewer(0, merge)\n\n    print \"merge created and connected...\"\n    return None\n## end\n\n## get coordinates and sort the nodes\n## start\n\ndef arr_nodes():\n    \n    sbuttons = nuke.thisNode()\n    merge = nuke.toNode('merge_diff')\n    xcm, ycm = (colormatrix.xpos(), colormatrix.ypos())\n\n    delivery.setXYpos(xcm+300,ycm + 150)\n    merge.setXYpos(xcm + 150, ycm + 240)\n    sbuttons.setXYpos(xcm, ycm-500)    \n\nif tst:\n\n    stereo_fileout()\n    stereo_read()\n    \n    delivery = (nuke.toNode('read_delivery'))\n    colormatrix = (nuke.toNode('ColorMatrix1'))\n\n    stereo_merge()\n    arr_nodes()    \n\n    # color label in node green\n    nuke.thisKnob().setLabel('<font color=\"Green\">    create stereo fileout, delivery read and difference    ')\n\nelse: \n\n    # message and color label in node red\n   \n    nuke.thisKnob().setLabel('<font color=\"Red\">    create stereo fileout, delivery read and difference    ')\n    nuke.message('No TrixterShotData found!')\n    " +STARTLINE}
 addUserKnob {22 set_ME l "    set artist to ME and save stereoelements script with version number    " t "\nSwitches the artist inside the TrixterShotData to the currently editing artist and saves a stereoelement script with the set delivery version number" T "## globals\n\nfrom tx.utility import login_name\nfrom tx_compositing.project import thisProject as txp\nTST = nuke.toNode('TrixterShotData')\nLBL_RED = nuke.thisKnob().setLabel('<font color=\"Red\">    set artist to ME and save stereoelements script with version number    ')\n\n## set artist\n# start\n\ndef set_artist():\n\n    uid = login_name()\n    if uid in txp.users():\n        uname = txp.user(uid).name\n        TST.knob('artist_initials').setValue(uid)\n        TST.knob('artist_name').setValue(uname)\n        print \"artist set to ME...\"\n    else:\n        LBL_RED\n        nuke.message(\"You are not a member of this project!\")\n        raise Exception(\"You are not a member of this project!\")    \n    \n    return None\n\n# end\n\n\n## save script\n# start\n\ndef save_script():\n\n    n = nuke.thisNode()\n    dv = n.knob('delivery_version').value()\n\n    if len(dv) > 0:\n        TST.knob('version').setValue(dv)\n        TST.knob('type').setValue('stereoelements')\n        import trixtershaketools as trixter\n        trixter.TXSaveScript(overwrite=True)\n        nuke.thisKnob().setLabel('<font color=\"Green\">    set artist to ME and save stereoelements script with version number    ')\n        print \"script saved...\"\n        nuke.message('Script saved as \"stereoelements\"!')\n    \n    else:\n        LBL_RED\n        nuke.message('Please set delivery version number!')\n\n    return None\n\n# end\n\nif TST:\n    \n    set_artist()\n    save_script()\n\nelse:\n    nuke.message('No TrixterShotData found!')\n    LBL_RED" +STARTLINE}
 addUserKnob {22 select_stereoelements l "    select all stereo write elements and send them to farm      " t "\nSelects all stereo write elements and opens up the renderfarm dialog.\n\nIf you want to render the nodes locally, use the 'select all stereo write elements' button below and render them via the normal render dialog from the menu" T "# select all stereo write nodes and submit to renderfarm\n\nimport tx_nuke.nuketools as nt\nfrom trixtercomptools_UI import submitter\n\nselection = nuke.selectedNodes()\n\n    \nfor i in selection:\n    i.knob('selected').setValue(False)\n    \nall_nodes = nuke.allNodes('Group')\nselements = nt.filterNodes(all_nodes, name='StereoElement*')\n\nfor i in selements:\n    i.knob('selected').setValue(True)\n    \nif i\['selected'].getValue() == True:\n    nuke.thisKnob().setLabel('<font color=\"Green\">    select all stereo write elements and send them to farm      ')\n    submitter.show()\n    print \"all stereo write nodes selected and send to farm...\"\n      \nelse:\n    nuke.thisKnob().setLabel('<font color=\"Red\">    select all stereo write elements and send them to farm      ')\n    nuke.message(\"No stereo write elements found!\")" +STARTLINE}
 addUserKnob {22 insert_reads l "    insert read nodes and disable all cameras    " t "\nSelects all write elements and creates new read nodes with the according paths.\n\nAdditionally all camera's 'read from file' checkboxes will get unticked, if there are any cameras included in the script." T "## globals\n\nimport tx_nuke.nuketools as nt\nfrom readFromWrite import ReadFromWrite as rfw\n\n# select all cameras and disable read from file\ndef disable_rff():\n\n    all_cams = nuke.allNodes('Camera2')\n    cam_elements = nt.filterNodes(all_cams, name='Camera*')\n\n    if cam_elements:\n        for i in cam_elements:\n            i.knob('read_from_file').setValue(False)    \n        nuke.message(\"All 'read from file' disabled!\")\n        print \"all read from file disabled...\" \n        \n    else: \n        nuke.message('No cameras found!')\n        print \"no cameras found...\"\n        \n\n# select all stereo write nodes and replace them with according read nodes\n\ndef replace_writes():\n\n    selection = nuke.selectedNodes()\n    for i in selection:\n        i.knob('selected').setValue(False)\n    \n    all_nodes = nuke.allNodes('Group')\n    selements = nt.filterNodes(all_nodes, name='StereoElement*')\n\n    for i in selements:\n        i.knob('selected').setValue(True)\n\n    if i\['selected'].getValue() == True:\n        nuke.thisKnob().setLabel('<font color=\"Green\">    insert read nodes and disable all cameras    ')\n        print \"all read nodes inserted...\"\n        rfw(True) \n\n    else:\n        nuke.thisKnob().setLabel('<font color=\"Red\">    insert read nodes and disable all cameras    ')\n        nuke.message('No stereo write elements found!')\n    \n    return None\n\ndisable_rff()\nreplace_writes()" +STARTLINE}
 addUserKnob {22 analyse_diff l "    analyse difference    " t "\nSet your viewer's input to None!\n\nAutomatically starts an analysis and creates a framehold at the biggest difference. \n\nThe analysation button is a good first quick look through and enough for the artist, stereo sups should still view the whole sequence.\n\nFirst the artist, later the supervisor needs to check if the difference is low enough to be ignored. Either check the curvetool for further peeks or run the analysation again.\n\n" T "#!/usr/bin/env python\n\nimport nuke\n\nprint \"importing nuke...\"\n\n########################################################################################################################\n\n__author__ = \"Boris Martinez Castillo\"\n__version__ = \"1.0.1\"\n__maintainer__ = \"Boris Martinez Castillo\"\n__email__ = \"boris.vfx@outlook.com\"\n\n########################################################################################################################\n\n## globals\nmerge = nuke.toNode('merge_diff')\nLBL_RED = nuke.thisKnob().setLabel('<font color=\"Red\">    analyse difference    ')\n\ndef stereo_analyzer():\n    start_frame = int(nuke.root()\['first_frame'].value())\n    end_frame = int(nuke.root()\['last_frame'].value())\n    bbox_size = nuke.root().format()\n    cv = nuke.nodes.CurveTool(ROI='0 0 \{0\} \{1\}'.format(bbox_size.width(), bbox_size.height()))\n    cv.setInput(0,merge)\n    nuke.execute(cv,start_frame,end_frame) # executes CurveTool\n\n    if type(get_stop_frame(cv)) == int:\n        \n        for i in nuke.selectedNodes():\n            i\['selected'].setValue(False)\n\n        cv\['selected'].setValue(True)\n        fh = nuke.createNode(\"FrameHold\")\n        fh\['first_frame'].setValue(get_stop_frame(cv))\n        print('mismatches found...') \n        LBL_RED\n        nuke.message(\"Mismatches found!\")\n\n    else:\n        nuke.thisKnob().setLabel('<font color=\"Green\">    analyse difference    ') \n        nuke.message('Great!\\nNo mismatches found!')\n        print('no mismatches found...')         \n    \ndef get_stop_frame(node):\n    anim_curve_x = node\['intensitydata'].animation(0)         \n    y_list = \[]\n    stop_frame = 0\n    \n    for key in anim_curve_x.keys():\n        x_value = key.x\n        y_value = key.y\n        y_list.append(y_value)\n        #  print \"key at %s has a value %s\" % (x_value,y_value)\n\n    print \"y_list: \", y_list\n    y_max_value = may_list) # calculate max value\n    \n    print \"max value found: \", y_max_value\n\n    if y_max_value < 0.000015:\n        return None \n\n    for key in anim_curve_x.keys():\n        x_value = key.x \n        y_value = key.y\n        if y_value == y_max_value:      \n            stop_frame = x_value \n            break\n\n    return int(stop_frame) \n\n# execute script\n\n\nif merge:\n    stereo_analyzer()\n\nelse:\n    LBL_RED\n    nuke.message('No difference merge with name \"merge_diff\" found!')" +STARTLINE}
 addUserKnob {26 div7 l "<font size='4'><b>Stereocomp</b>"}
 addUserKnob {22 save_stereocomp l "    save stereocomp script    " t "\nSaves the script as a stereocomp file with the according delivery version." -STARTLINE T "n = nuke.thisNode()\ndv = n.knob('delivery_version').value()\ntst = nuke.toNode('TrixterShotData')\n\nif tst:\n    if len(dv) > 0:\n        tst.knob('version').setValue(dv)\n        tst.knob('type').setValue('stereocomp')\n        import trixtershaketools as trixter\n        trixter.TXSaveScript(overwrite=True)\n        nuke.thisKnob().setLabel('<font color=\"Green\">    save stereocomp script    ')\n        nuke.message('Script saved as \"stereocomp\"!')\n        print \"stereocomp script saved...\"\n\n    else:\n        nuke.thisKnob().setLabel('<font color=\"Red\">    save stereocomp script    ')\n        nuke.message('Please set delivery version number!')\n        \n\nelse:\n    nuke.thisKnob().setLabel('<font color=\"Red\">    save stereocomp script    ')\n    nuke.message('No TrixterShotData found!')"}
 addUserKnob {22 recursive_delete l "    delete upstream of stereo write nodes (slow!!)    " t "\nGoes through all pipes above the write elements and deletes all unnecessary nodes. \n\nAll linked/expressioned nodes will stay. The artist needs to go through them and delete them manually if they are not needed anymore." T "# select all stereo write nodes\n## globals\n\nimport tx_nuke.nuketools as nt\nfrom tx_nuke.nuketools import deleteNodesUpstream as dnu\n\n## select all write nodes and delete upstream\n\nselection = nuke.selectedNodes()\nfor i in selection:\n    i.knob('selected').setValue(False)\n    \nall_nodes = nuke.allNodes('Group')\nselements = nt.filterNodes(all_nodes, name='StereoElement*')\n\nfor i in selements:\n    i.knob('selected').setValue(True)\n\nif i\['selected'].getValue() == True:\n   for i in nuke.selectedNodes():\n       dnu(i)\n   nuke.thisKnob().setLabel('<font color=\"Green\">    delete upstream of stereo write nodes (slow!!)    ')\n   nuke.message('All unnecessary nodes deleted!')\n   print \"all unncessary nodes deleted...\" \n\nelse:\n   nuke.message('No stereo write elements found!')" +STARTLINE}
 addUserKnob {26 div l "<font size='4'><b>Publish</b>"}
 addUserKnob {22 ftrack_review l "<font color=\"RED\">    set ftrack task to \"Pending Review\"    " t "\nSets the stereocomp task inside ftrack to 'pending review'." T "import ftrack_api\nsession = ftrack_api.Session()\n\ntst = nuke.toNode('TrixterShotData')\nLBL_GREEN = nuke.thisKnob().setLabel('<font color=\"Green\">    set ftrack task to \"Pending Review\"    ')\nLBL_RED = nuke.thisKnob().setLabel('<font color=\"RED\">    set ftrack task to \"Pending Review\"    ')\n\nif tst:\n    prj_tld = tst.knob('projectname').value()\n    sequence = tst.knob('sequence').value()\n    shot = tst.knob('shot').value()\n    \n    ftproject = session.query('Project where full_name is \"%s\"' % prj_tld).one()\n    ftshot = session.query('Shot where name is \"%s\" and parent.name is \"%s\" and project.full_name is \"%s\"' % (shot, sequence, prj_tld)).one()\n    \n    ftrack_status = session.query('Status where name is \"Pending Review\"').one()    \n    fttask = session.query('Task where type.name is \"Stereocomp\" and parent.id is \"%s\"' % ftshot\['id']).first()\n\n    LBL_GREEN\n\n    if fttask is not None:\n        fttask\['status'] = ftrack_status\n        try:\n            LBL_GREEN\n            session.commit()\n        \n        except Exception, e:\n            LBL_RED\n            nuke.message('Error setting ftrack status:\\n' + e)\n    else:\n        LBL_RED\n        nuke.message('ftrack Stereocomp task not found!')\nelse:\n    LBL_RED\n    nuke.message('No TrixterShotData found!')" +STARTLINE}
 addUserKnob {26 fantastic_job l "" t "\nDear lovely artist! \nYou are done! Your journey is over! The fate of this stereocomp does not lie inside your hands anymore. Save the script, close nuke and grab a coffee/tea/clubmate/cake/cookies/schnitzel/bratwoaschd/kasspatzn/dampfnudeln/gin-tonic/cocktail. You get the idea, celebrate life! Get outside play soccer in the sun, draw, what's with that guitar standing dusty in the corner of your room? Start a sing-a-long, join yoga classes, do I hear a beach over there and a wavy sea? Or what about that escape room game you always had in mind? Paintball? Minigolf? Toughmudder preparation? GO OUT ALREADY AND STOP READING THIS!\n\nIt's the supervisor's last look which matters now...\n\n... and he/she hopefully doesn't send it back to you!" +STARTLINE T "      Please do not delete the TrixterShotData node!\n      Please save your script and close it.\n      Tell your coordinator and stereo supervisor you are done.\n      Receive their approving nods and feel good."}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {20 Troubleshootingifneeded l "Troubleshooting if needed" n 1}
 Troubleshootingifneeded 0
 addUserKnob {26 div3 l "<font size='4'><b>Troubleshooting</b>" -STARTLINE T "<i />"}
 addUserKnob {22 bbox_linked l "    create bounding box fix    " t "\n(happens often in fullcg shots)\n\nIf you encounter a mismatch between the original and the rendered stereo output <b> after e.g. a distortion node</b> has been applied, it might be that the bounding box is incorrect. Check the original tree and the rendered node and if there is only one pixel different you get a huge difference.\n \nFor this, add those two nodes after your read node and add or reduce according pixels in the adjbbox node." -STARTLINE T "nuke.root().begin()\n\ncur = nuke.toNode('Stereo_Buttons')\ncrop = nuke.nodes.TNT_CropOverscan(preset=\"bbox linked\", box='input0.bbox.x input0.bbox.y input0.bbox.r input0.bbox.t')\nadjust = nuke.nodes.AdjBBonumpixels='0')\n\nadjust.setInput(0,crop)\n\n# Get coordinates and move nodes\nx, y = (cur.xpos(), cur.ypos())\ncrop.setXYpos(x - 500, y + 150)\nadjust.setXYpos(x - 500, y + 250)"}
 addUserKnob {22 select_stereoelements2 l "    select all stereo write elements   " T "import tx_nuke.nuketools as nt\n\n\nselection = nuke.selectedNodes()\nfor i in selection:\n    i.knob('selected').setValue(False)\n    \nall_nodes = nuke.allNodes('Group')\nselements = nt.filterNodes(all_nodes, name='StereoElement*')\n\nfor i in selements:\n    i.knob('selected').setValue(True)\n\nif i\['selected'].getValue() == True:\n    print \"All stereo write elements selected...\"\n\nelse:\n    nuke.message (\"No stereo write elements found!\")" +STARTLINE}
 addUserKnob {22 deep_to_depth l "    create deep to depth tree for cg elements     " t "\nMANDATORY: \nCreates a 'deep to depth tree' for rendering depth mattes for every cg element sitting inside a nuke script. \n\nSelect the right version inside a cg render input and create your render layer. You will receive a deep node next to the loaded cg element. \n\nPipe the nodes accordingly, set the name inside the write element and render out a depth including its alpha (32Bit!).\n \nSometimes it might happen, you don't get a deep element. Create a read node and set the path manually." T "# Create Nodes\nconst = nuke.createNode('Constant', 'name DEEP', inpanel=False)\nadddepth = nuke.nodePaste(\"/mnt/repository/source_code/engines/nuke/0.6.x/etc/nuke/templates/CG/CG_Depth_From_Deep.nk\")\ncri = nuke.nodes.Constant(name='CG_Render_Input', label='keep an eye for the version number')\n\nshuf = nuke.createNode('Shuffle', 'label depth', inpanel=False)\nshuf\['in'].setValue('depth')\nshuf\['red'].setValue('red')\nshuf\['green'].setValue('red')\nshuf\['blue'].setValue('red')\nshuf\['in2'].setValue('alpha')\nshuf\['alpha'].setValue('alpha2')\n\ndist = nuke.createNode('NoOp', 'name YOUR_DISTORTION', inpanel=False)\n\nwrite = nuke.nodePaste(\"/mnt/repository/source_code/engines/nuke/0.6.x/etc/nuke/templates/Stereo/write_element.nk\")\nwrite.knob('datatype').setValue(\"32 bit float\")\n\noperation=\"difference\"\n\n# Remove inputs\ncri.setInput( 0,None )\nadddepth.setInput( 0,None )\nshuf.setInput( 0,None )\ndist.setInput( 0,None )\nwrite.setInput( 0, None )\n\n# Set new inputs; const, adddepth, cri, shuf, dist\nadddepth.setInput( 1,const )\nadddepth.setInput( 0,cri )\nshuf.setInput( 0,adddepth )\ndist.setInput( 0,shuf )\nwrite.setInput ( 0,dist )\n\n# Get coordinates and move nodes\n\n# dummy for current position of user in the DAG\ndummy = nuke.createNode('Dot')\n\nx, y = (dummy.xpos(), dummy.ypos())\nconst.setXYpos(x, y - 50)\nadddepth.setXYpos(x, y + 100)\ncri.setXYpos(x + 150, y + 71)\nshuf.setXYpos(x, y + 170)\ndist.setXYpos(x, y + 250)\nwrite.setXYpos(x, y + 320)\n\nnuke.delete(dummy)" +STARTLINE}
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {20 sup l "Supervisor area" n 1}
 sup 0
 addUserKnob {22 deleteme l "    DONE! Delete nodes, create stereopackage and grab a tea    " t "\nFantastic! You are done!\nDelete this node, save the script, create the stereopackage (takes a while and closes the script automatically), tell your coordinator this is finally done (he/she will be happy!) and join your artist's company (see above what he/she is probably doing at the moment).\n<b>.</b>\n<b>.</b>\n<b>.</b>\n<b>.</b>\n<b>.</b>\nAnd the tea is a lie. You need to make it on your own. If you haven't already boiled the water... sorry." T "##globals\n\nimport stereo_package as sp\na = nuke.toNode('read_deliv')\nb = nuke.toNode('merge_diff')\nn = nuke.thisNode()\n\n## Delete nodes\n\nnuke.delete(a)\nnuke.delete(b)\nnuke.delete(n)\n\n## save script\nnuke.scriptSave()\n\n## print and execute stereo packaging\nprint 'DONE! Have fun in the sun!'\nsp.create()" +STARTLINE}
 addUserKnob {20 endGroup_2 l endGroup n -1}
 addUserKnob {26 ""}
 addUserKnob {20 gr l "Wiki and Tutorials" n 1}
 gr 0
 addUserKnob {22 tutorial l "    view video tutorial    " -STARTLINE T "subprocess.Popen(\[\"/usr/bin/vlc\",\"/corky/projects/Library/Tutorials/Nuke/20101014_NukeStereo_Tutorials/tutorial_stereo-compsetup.mp4\"])"}
 addUserKnob {22 wiki l "    open up Trixter Stereo Wiki - For Artists    " T "import webbrowser\n\ndef openWebpage():\n    webbrowser.open(\"http://wiki.trixter.intern/Compositing/Workflow/CompositingForStereoElements\")\n\nopenWebpage()\n\n" +STARTLINE}
 addUserKnob {22 wiki2 l "    open up Trixter Stereo Wiki - Creating Stereo Packages    " T "import webbrowser\n\ndef openWebpage():\n    webbrowser.open(\"http://wiki.trixter.intern/Compositing/Workflow/CreatingStereoPackages\")\n\nopenWebpage()\n\n\n" +STARTLINE}
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {26 copyright l "" +STARTLINE T "<font color='DimGray'>version 1.00 &copy; Michael Habenicht, Bernd Macht, Boris Martinez-Castillo"}
}
